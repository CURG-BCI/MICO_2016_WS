<launch>

    <!-- Launch parameters -->
    <arg name="use_robot_hw" default="True" />
    <arg name="use_kinect_hw" default="True" />
    <arg name="ros_bag_filename" default="" />


    <!-- Bounds on environment -->
    <arg name="x_filter_min" value="0.1" />
    <arg name="y_filter_min" value="-0.6" />
    <arg name="z_filter_min" value="0.1" />
    <arg name="x_filter_max" value="0.45" />
    <arg name="y_filter_max" value="-0.2" />
    <arg name="z_filter_max" value="0.3" />

    <!-- Mico arm controllers -->
        <!-- Real arm controller -->
    <include file="$(find kinova_bringup)/launch/kinova_robot.launch" if="$(arg use_robot_hw)">
        <arg name="kinova_robotType" value="m1n6s200"/>
    </include>

    <include file="$(find m1n6s200_moveit_config)/launch/m1n6s200_demo.launch" if="$(arg use_robot_hw)">
        <arg name="show_rviz" value="false" />
    </include>

        <!-- Fake arm controller -->
    <include file="$(find m1n6s200_moveit_config)/launch/demo.launch" unless="$(arg use_robot_hw)" >
        <arg name="show_rviz" value="false" />
    </include>


    <!-- Trajectory Planners -->
    <!--<group ns="crui_manager">-->
            <param name="analyze_grasp_topic" type="string" value="/crui_manager/analyze_grasp" />
            <param name="execute_grasp_topic" type="string" value="/crui_manager/execute_grasp" />
            <param name="run_recognition_topic" type="string" value="/crui_manager/run_recognition" />

            <param name="grasp_approach_tran_frame" type="string" value="/approach_tran" />
            <param name="world_frame" type="string" value="/world" />

            <param name="arm_move_group_name" type="string" value="arm" />
            <param name="gripper_move_group_name" type="string" value="gripper" />

            <param name="analyzer_planner_id" type="string" value="[PRMkConfigDefault]" />
            <param name="executor_planner_id" type="string" value="[BiRRTkConfigDefault]" />
            <param name="allowed_analyzing_time" type="double" value="2" />
            <param name="allowed_execution_time" type="double" value="8" />

            <param name="final_block_position_x" type="double" value="0.2" />
            <param name="final_block_position_y" type="double" value="0.3" />
            <param name="final_block_position_z" type="double" value="0.2" />

            <param name="pre_grasp_approach_direction_frame_id" type="string" value="/approach_tran" />
            <param name="pre_grasp_approach_direction_x" type="double" value="0" />
            <param name="pre_grasp_approach_direction_y" type="double" value="0" />
            <param name="pre_grasp_approach_direction_z" type="double" value="1" />

            <param name="post_grasp_retreat_direction_frame_id" type="string" value="/world" />
            <param name="post_grasp_retreat_direction_x" type="double" value="0" />
            <param name="post_grasp_retreat_direction_y" type="double" value="0" />
            <param name="post_grasp_retreat_direction_z" type="double" value="1" />

            <rosparam param="pre_grasp_goal_point_effort">[50.0, 50.0]</rosparam>
            <rosparam param="pre_grasp_goal_point_positions">[0.0, 0.0]</rosparam>
            <param name="pre_grasp_goal_point_time_from_start_secs" type="double" value="0" />
            <rosparam param="pre_grasp_joint_names">[m1n6s200_joint_finger_1, m1n6s200_joint_finger_2]</rosparam>

            <rosparam param="grasp_goal_point_effort">[50.0, 50.0]</rosparam>
            <rosparam param="grasp_goal_point_positions">[1.2, 1.2]</rosparam>
            <param name="grasp_goal_point_time_from_start_secs" type="double" value="0" />

            <rosparam param="grasp_posture_joint_names">[m1n6s200_joint_finger_1, m1n6s200_joint_finger_2]</rosparam>

            <param name="pre_grasp_approach_min_distance" type="double" value="0.05" />
            <param name="pre_grasp_approach_desired_distance" type="double" value="0.1" />

            <param name="post_grasp_retreat_min_distance" type="double" value="0.05" />
            <param name="post_grasp_retreat_desired_distance" type="double" value="0.1" />

            <param name="max_contact_force" type="double" value="-1" />

            <!--<rosparam command="load" file="$(find m1n6s200_moveit_config)/config/kinematics.yaml"/>-->

            <node name="crui_manager" pkg="graspit_moveit_controller" type="crui_manager.py" output="screen" >
                <remap from="/joint_states"   to="/m1n6s200_driver/out/joint_state" />
            </node>

      <!--</group>-->

    <!-- World manager node-->
    <!-- <group ns="world_manager"> -->
        <!--Load the walls for your workspace-->
        <rosparam command="load" file="$(find launcher)/configs/mico.workspace.yaml"/>

        <!-- <param name="planning_scene_topic" value="/get_planning_scene"/> -->
        <node name="world_manager" pkg="world_manager" type="world_manager_server.py" output="screen"/>
    <!-- </group> -->

    <!-- Kinect2 Broadcasters -->
    <node pkg="rosbag_republisher" type="rosbag_republisher.py" name="rosbag_republisher"
          output="screen" args="$(arg ros_bag_filename)" if="$(eval ros_bag_filename != '')" />

    <include file="$(find kinect2_bridge)/launch/kinect2_bridge.launch" if="$(arg use_kinect_hw)" >
        <arg name="depth_method" value="opencl" />
        <arg name="publish_tf" value="true" />
        <arg name="max_depth" value="3.0" />
        <arg name="fps_limit" value="5" />
        <arg name="calib_path" value="$(find launcher)/data/" />
    </include>


    <!-- TF Broadcasters -->
    <node pkg="filter_tf" type="filter_tf.py" name="filter_tf_marker8_kinect2" args="/ar_marker_8 /kinect2_link 10 --destination_frame /world"/>

    <node name="ar_track_alvar_kinectone" pkg="ar_track_alvar" type="individualMarkers" respawn="false" output="screen">
        <param name="marker_size"           type="double" value="6.0" />
        <param name="max_new_marker_error"  type="double" value="0.08" />
        <param name="max_track_error"       type="double" value="0.0" />
        <param name="output_frame"          type="string" value="/kinect2_rgb_optical_frame" />

        <remap from="camera_image"  to="/kinect2/hd/points" />
        <remap from="camera_info"   to="/kinect2/hd/camera_info" />
    </node>

    <node pkg="lcsr_tf_tools" type="interactive_transform_publisher" name="world_to_root" args="0.171823 -0.0481138 0.03697977 0.000000 0.0000 1.0 0.0 /world /root 50"/>

    <node pkg="tf" type="static_transform_publisher" name="hand_to_approach" args= "0, 0, -0.12, 3.14159, 3.14159, 0 m1n6s200_end_effector approach_tran 100" />

    <!-- Object Recognition -->
    <group ns="objrec_node">
        <node pkg="block_recognition" type="block_recognition_node" name="block_recognition_node" respawn="true" />
        <param name="x_clip_min" value="$(arg x_filter_min)"/>
        <param name="y_clip_min" value="$(arg y_filter_min)"/>
        <param name="z_clip_min" value="$(arg z_filter_min)"/>
        <param name="x_clip_max" value="$(arg x_filter_max)"/>
        <param name="y_clip_max" value="$(arg y_filter_max)"/>
        <param name="z_clip_max" value="$(arg z_filter_max)"/>
    </group>


    <!-- RViz -->
    <node name="$(anon rviz)" pkg="rviz" type="rviz" respawn="false" args="-d $(find launcher)/launch/moveit.rviz"
          output="screen">
        <rosparam command="load" file="$(find m1n6s200_moveit_config)/config/kinematics.yaml"/>
    </node>


    <!-- Graspit -->
    <node name="graspit_ros" pkg="graspit" type="graspit_simulator"  output="screen" args=" -p libgraspit_bci_plugin" >
        <env name="GRASPIT" value="$(find graspit)/graspit_source"/>
        <env name="CGDB_MODEL_ROOT" value="$(find graspit)/graspit_source/cgdb"/>
        <env name="GRASPIT_PLUGIN_DIR" value="$(find graspit_bci_plugin)/../../devel/lib"/>
        <env name="SPRITES_DIR" value="$(find graspit_bci_plugin)/sprites/"/>
        <env name="LOG_DIR" value="$(find graspit_bci_plugin)/logs/"/>
    </node>

    <!-- Run Experiment -->
    <node name="run_experiment" type="run_experiment.py" pkg="run_experiment" />

    <!-- Alexa Controller -->
    <!-- This one you have to run on your own, unfortunately -->
    <!-- TODO: Integrate Xuelong's addition -->

    <param name="/move_group/trajectory_execution/execution_duration_monitoring" value="false" />
    <!--<param name="/move_group/allowed_execution_duration_scaling" value="10.0"/>-->
    <!--<param name="/move_group/trajectory_execution/allowed_execution_duration_scaling" value="10.0"/>-->
    <!--<param name="/move_group/trajectory_execution/allowed_start_tolerance" value="0.1"/>-->

</launch>
